.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::Capitalize 3pm"
.TH Text::Capitalize 3pm "2015-01-26" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Capitalize \- capitalize strings ("to WORK AS titles" becomes "To Work as Titles")
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use Text::Capitalize;
\&
\&   print capitalize( "...and justice for all" ), "\en";
\&      ...And Justice For All
\&
\&   print capitalize_title( "...and justice for all" ), "\en";
\&      ...And Justice for All
\&
\&   print capitalize_title( "agent of SFPUG", PRESERVE_ALLCAPS=>1 ), "\en";
\&      Agent of SFPUG
\&
\&   print capitalize_title( "the ring:  symbol or cliche?",
\&                           PRESERVE_WHITESPACE=>1 ), "\en";
\&      The Ring:  Symbol or Cliche?
\&      (Note, double\-space after colon is still there.)
\&
\&   # To work on international characters, may need to set locale
\&   use Env qw( LANG );
\&   $LANG = "en_US";
\&   print capitalize_title( "u\*:ber maus" ), "\en";
\&      U\*:ber Maus
\&
\&   use Text::Capitalize qw( scramble_case );
\&   print scramble_case( \*(AqIt depends on what you mean by "mean"\*(Aq );
\&      It dEpenDS On wHAT YOu mEan by "meAn".
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
.Vb 2
\&  Text::Capitalize is for capitalizing strings in a manner
\&suitable for use in titles.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Text::Capitalize provides some routines for \fBtitle-like\fR
formatting of strings.
.PP
The simple \fBcapitalize\fR function just makes the inital character
of each word uppercase, and forces the rest to lowercase.
.PP
The \fBcapitalize_title\fR function applies English title case rules
(discussed below) where only the \*(L"important\*(R" words are supposed
to be capitalized.  There are also some customization features
provided to allow the user to choose variant rules.
.PP
Comparing \fBcapitalize\fR and \fBcaptialize_title\fR:
.PP
.Vb 3
\&  Input:             "lost watches of splitsville"
\&  capitalize:        "Lost Watches Of Splitsville"
\&  capitalize_title:  "Lost Watches of Splitsville"
.Ve
.PP
Some examples of formatting with \fBcapitalize_title\fR:
.PP
.Vb 2
\&  Input:             "KiLLiNG TiMe"
\&  capitalize_title:  "Killing Time"
\&
\&  Input:             "we have come to wound the autumnal city"
\&  capitalize_title:  "We Have Come to Wound the Autumnal City"
\&
\&  Input:             "ask for whom they ask for"
\&  captialize_title:  "Ask for Whom They Ask For"
.Ve
.PP
Text::Capitalize also provides some functions for special effects
such as \fBscramble_case\fR, which typically would be used for this sort
of transformation:
.PP
.Vb 2
\&  Input:            "get whacky"
\&  scramble_case:    "gET wHaCkY"  (or something similar)
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
.SS "default exports"
.IX Subsection "default exports"
.IP "capitalize" 4
.IX Item "capitalize"
Makes the inital character of each word uppercase, and forces the
rest to lowercase.
.Sp
The original routine by Stanislaw Y. Pusep.
.IP "capitalize_title" 4
.IX Item "capitalize_title"
Applies English title case rules (See \s-1BACKGROUND\s0) where only the
\&\*(L"important\*(R" words are supposed to be capitalized.
.Sp
The one required argument is the string to be capitalized.
.Sp
Some customization options may be passed in as pairs of names and
values following the required argument.
.Sp
The following customizations are allowed:
.Sp
Boolean:
.Sp
.Vb 3
\&  PRESERVE_WHITESPACE
\&  PRESERVE_ALLCAPS
\&  PRESERVE_ANYCAPS
.Ve
.Sp
Array reference:
.Sp
.Vb 1
\&  NOT_CAPITALIZED
.Ve
.Sp
See \*(L"Customizing the Exceptions to Capitalization\*(R".
.SS "optional exports"
.IX Subsection "optional exports"
.ie n .IP "@exceptions" 4
.el .IP "\f(CW@exceptions\fR" 4
.IX Item "@exceptions"
The list of minor words that don't usually get capitalized in
titles (used by capitalize_title).  Defaults to:
.Sp
.Vb 4
\&     a an the
\&     and or nor for but so yet
\&     to of by at for but in with has
\&     de von
.Ve
.ie n .IP "%defaults_capitalize_title" 4
.el .IP "\f(CW%defaults_capitalize_title\fR" 4
.IX Item "%defaults_capitalize_title"
Defines the default arguments for the capitalize_title function
Initially, this is set-up to shut off the features
\&\s-1PRESERVE_WHITESPACE, PRESERVE_ALLCAPS\s0 and \s-1PRESERVE_ANYCAPS\s0;
it also has \f(CW@exceptions\fR as the \s-1NOT_CAPITALIZED\s0 list.
.IP "scramble_case" 4
.IX Item "scramble_case"
This routine provides a special effect: sCraMBliNg tHe CaSe
.Sp
The algorithm here uses a modified probability distribution to get
a weirder looking effect than simple randomization such as with random_case.
.Sp
For a discussion of the algorithm, see \*(L"\s-1SPECIAL EFFECTS\*(R"\s0.
.IP "random_case" 4
.IX Item "random_case"
Randomizes the case of each character with a 50\-50 chance
of each one becoming upper or lower case.
.IP "zippify_case" 4
.IX Item "zippify_case"
Function to provide a special effect: \*(L"\s-1RANDOMLY\s0 upcasing \s-1WHOLE WORDS\s0 at a \s-1TIME\*(R".\s0
.Sp
This uses a similar algorithm to scramble_case, though it also
ignores words on the \f(CW@exceptions\fR list, just as capitalize_title does.
.SH "BACKGROUND"
.IX Header "BACKGROUND"
The capitalize_title function tries to do the right thing by
default: adjust an arbitrary chunk of text so that it can be used
as a title.  But as with many aspects of the human languages, it
is extremely difficult to come up with a set of programmatic
rules that will cover all cases.
.SS "Words that don't get capitalized"
.IX Subsection "Words that don't get capitalized"
This web page:
.PP
.Vb 1
\&  http://www.continentallocating.com/World.Literature/General2/LiteraryTitles2.htm
.Ve
.PP
presents some admirably clear rules for capitalizing titles:
.PP
.Vb 6
\&  ALL words in EVERY title are capitalized except
\&  (1) a, an, and the,
\&  (2) two and three letter conjunctions (and, or, nor, for, but, so, yet),
\&  (3) prepositions.
\&  Exceptions:  The first and last words are always capitalized even
\&  if they are among the above three groups.
.Ve
.PP
But consider the case:
.PP
.Vb 1
\&  "It Waits Underneath the Sea"
.Ve
.PP
Should the word \*(L"underneath\*(R" be downcased because it's a preposition?
Most English speakers would be surprised to see it that way.
Consequently, the default list of exceptions to capitalization in this module
only includes the shortest of the common prepositions (to of by at for but in).
.PP
The default entries on the exception list are:
.PP
.Vb 4
\&     a an the
\&     and or nor for but so yet
\&     to of by at for but in with has
\&     de von
.Ve
.PP
The observant may note that the last row is not composed of English
words.  The honorary \*(L"de\*(R" has been included in honor of \*(L"Honore\*' de
Balzac\*(R".  And \*(L"von\*(R" was added for the sake of equal time.
.SS "Customizing the Exceptions to Capitalization"
.IX Subsection "Customizing the Exceptions to Capitalization"
If you have different ideas about the \*(L"rules\*(R" of English
(or perhaps if you're trying to use this code with another
language with different rules) you might like to substitute
a new exception list of your own:
.PP
.Vb 2
\&  capitalize_title( "Dude, we, like, went to Old Slavy, and uh, they didn\*(Aqt have it",
\&                     NOT_CAPITALIZED => [ qw( uh duh huh wha like man you know ) ] );
.Ve
.PP
This should return:
.PP
.Vb 1
\&   Dude, We, like, Went To Old Slavy, And uh, They Didn\*(Aqt Have It
.Ve
.PP
Less radically, you might like to simply add a word to the list,
for example \*(L"from\*(R":
.PP
.Vb 2
\&   use Text::Capitalize 0.2 qw( capitalize_title @exceptions );
\&   push @exceptions, "from";
\&
\&   print capitalize_title( "fungi from yuggoth",
\&                           NOT_CAPITALIZED => \e@exceptions);
.Ve
.PP
This should output:
.PP
.Vb 1
\&    Fungi from Yuggoth
.Ve
.SS "All Uppercase Words"
.IX Subsection "All Uppercase Words"
In order to work with a wide range of input strings, by default
capitalize_title presumes that upper-case input needs to be adjusted
(e.g. \*(L"\s-1DOOM APPROACHES\s0!\*(R" would become \*(L"Doom Approaches!\*(R").  But, this
doesn't allow for the possibilities such as an acronym in a title
(e.g. \*(L"\s-1RAM\s0 Prices Plummet\*(R" ideally should not become \*(L"Ram Prices
Plummet\*(R").  If the \s-1PRESERVE_ALLCAPS\s0 option is set, then it will be
presumed that an all-uppercase word is that way for a reason, and
will be left alone:
.PP
.Vb 2
\&   print capitalize_title( "ram more RAM down your throat",
\&                           PRESERVE_ALLCAPS => 1 );
.Ve
.PP
This should output:
.PP
.Vb 1
\&      Ram More RAM Down Your Throat
.Ve
.SS "Preserving Any Usage of Uppercase for Mixed-case Words"
.IX Subsection "Preserving Any Usage of Uppercase for Mixed-case Words"
There are some other odd cases that are difficult to handle well,
notably mixed-case words such as \*(L"iMac\*(R", \*(L"CHiPs\*(R", and so on.  For
these purposes, a \s-1PRESERVE_ANYCAPS\s0 option has been provided which
presumes that any usage of uppercase is there for a reason, in which
case the entire word should be passed through untouched.  With
\&\s-1PRESERVE_ANYCAPS\s0 on, only the case of all lowercase words will ever
be adjusted:
.PP
.Vb 2
\&   print capitalize_title( "TLAs i have known and loved",
\&                       PRESERVE_ANYCAPS => 1 );
.Ve
.PP
This should output:
.PP
.Vb 1
\&   TLAs I Have Known and Loved
\&
\&   print capitalize_title( "the next iMac: just another NeXt?",
\&                            PRESERVE_ANYCAPS => 1);
.Ve
.PP
This should output:
.PP
.Vb 1
\&   The Next iMac: Just Another NeXt?
.Ve
.SS "Handling Whitespace"
.IX Subsection "Handling Whitespace"
By default, the capitalize_title function presumes that you're trying
to clean up potential title strings. As an extra feature it collapses
multiple spaces and tabs into single spaces.  If this feature doesn't
seem desirable and you want it to literally restrict itself to
adjusting capitalization, you can force that behavior with the
\&\s-1PRESERVE_WHITESPACE\s0 option:
.PP
.Vb 2
\&   print capitalize_title( "it came from texas:  the new new world order?",
\&                           PRESERVE_WHITESPACE => 1);
.Ve
.PP
This should output:
.PP
.Vb 1
\&      It Came From Texas:  The New New World Order?
.Ve
.PP
(Note: the double-space after the colon is still there.)
.SS "Comparison to Text::Autoformat"
.IX Subsection "Comparison to Text::Autoformat"
As you might expect, there's more than one way to do this,
and these two pieces of code perform very similar functions:
.PP
.Vb 2
\&   use Text::Capitalize 0.2;
\&   print capitalize_title( $t ), "\en";
\&
\&   use Text::Autoformat;
\&   print autoformat { case => "highlight", right => length( $t ) }, $t;
.Ve
.PP
Note: with autoformat, supplying the length of the string as the
\&\*(L"right margin\*(R" is much faster than plugging in an arbitrarily large
number.  There doesn't seem to be any other way of turning off
line-breaking (e.g. by using the \*(L"fill\*(R" parameter) though possibly
there will be in the future.
.PP
As of this writing, \*(L"capitalize_title\*(R" has some advantages:
.IP "1." 4
It works on characters outside the English 7\-bit \s-1ASCII\s0
range, for example with my locale setting (en_US) the
\&\s-1ISO\-8859\-1\s0 International characters are handled correctly,
so that \*(L"u\*:ber maus\*(R" becomes \*(L"U\*:ber Maus\*(R".
.IP "2." 4
Minor words following leading punctuation become upper case:
.Sp
.Vb 1
\&   "...And Justice for All"
.Ve
.IP "3." 4
It works with multiple sentence input (e.g. \*(L"And sooner. And later.\*(R"
should probably not be \*(L"And sooner. and later.\*(R")
.IP "4." 4
The list of minor words is more extensive (i.e. includes: so, yet, nor),
and is also customizable.
.IP "5." 4
There's a way of preserving acronyms via the \s-1PRESERVE_ALLCAPS\s0 option
and similarly, mixed-case words (\*(L"iMac\*(R", \*(L"NeXt\*(R", etc") with the
\&\s-1PRESERVE_ANYCAPS\s0 option.
.IP "6." 4
capitalize_title is roughly ten times faster.
.PP
Another difference is that Text::Autoformat's \*(L"highlight\*(R"
always preserves whitespace something like capitalize_title
does with the \s-1PRESERVE_WHITESPACE\s0 option set.
.PP
However, it should be pointed out that Text::Autoformat is under
active maintenance by Damian Conway.  It also does far more than
this module, and you may want to use it for other reasons.
.SS "Still more ways to do it"
.IX Subsection "Still more ways to do it"
Late breaking news: The second edition of the Perl Cookbook
has just come out.  It now includes: \*(L"Properly Capitalizing
a Title or Headline\*(R" as recipe 1.14.  You should
familiarize yourself with this if you want to become a true
master of all title capitalization routines.
.PP
(And I see that recipe 1.13 includes a \*(L"randcap\*(R" program as
an example, which as it happens does something like the
random_case function described below...)
.SH "SPECIAL EFFECTS"
.IX Header "SPECIAL EFFECTS"
Some functions have been provided to make strings look weird
by scrambling their capitalization (\*(L"lIKe tHiS\*(R"):
random_case and scramble_case.  The function \*(L"random_case\*(R"
does a straight-forward randomization of capitalization so
that each letter has a 50\-50 chance of being upper or lower
case.  The function \*(L"scramble_case\*(R" performs a very similar
function, but does a slightly better job of producing something
\&\*(L"weird-looking\*(R".
.PP
The difficulty is that there are differences between human
perception of randomness and actual randomness.  Consider
the fact that of the sixteen ways that the four letter word
\&\*(L"word\*(R" can be capitalized, three of them are rather boring:
\&\*(L"word\*(R", \*(L"Word\*(R" and \*(L"\s-1WORD\*(R". \s0 To make it less likely that
scramble_case will produce dull output when you want \*(L"weird\*(R"
output, a modified probability distribution has been used
that records the history of previous outcomes, and tweaks
the likelihood of the next decision in the opposite
direction, back toward the expected average.  In effect,
this simulates a world in which the Gambler's Fallacy is
correct (\*(L"Hm... red has come up a lot, I bet that black is
going to come up now.\*(R"). \*(L"Streaks\*(R" are much less likely
with scramble_case than with random_case.
.PP
Additionally, with scramble_case the probability that the
first character of the input string will become upper-case
has been tweaked to less than 50%.  (Future versions may
apply this tweak on a per-word basis rather than just on a
per-string basis).
.PP
There is also a function that scrambles capitalization on
a word-by-word basis called \*(L"zippify_case\*(R", which should produce output
like: \*(L"In my \s-1PREVIOUS\s0 life i was a LATEX-novelty \s-1REPAIRMAN\s0!\*(R"
.SH "EXPORT"
.IX Header "EXPORT"
By default, this version of the module provides the two
functions capitalize and capitalize_title.  Future versions
will have no further additions to the default export list.
.PP
Optionally, the following functions may also be exported:
.IP "scramble_case" 4
.IX Item "scramble_case"
A function to scramble capitalization in a wEiRD loOOkInG wAy.
Supposed to look a little stranger than the simpler random_case
output
.IP "random_case" 4
.IX Item "random_case"
Function to randomize capitalization of each letter in the
string.  Compare to \*(L"scramble_case\*(R"
.IP "zippify_case" 4
.IX Item "zippify_case"
A function like \*(L"scramble_case\*(R" that acts on a word-by-word basis
(Somewhat \s-1LIKE\s0 this, \s-1YOU\s0 know?).
.PP
It is also possible to export the following variables:
.ie n .IP "@exceptions" 4
.el .IP "\f(CW@exceptions\fR" 4
.IX Item "@exceptions"
The list of minor words that capitalize_title uses by default to
determine the exceptions to capitalization.
.ie n .IP "%defaults\-capitalize_title" 4
.el .IP "\f(CW%defaults\fR\-capitalize_title" 4
.IX Item "%defaults-capitalize_title"
The hash of allowed arguments (with defaults) that the
capitalize_title function uses.
.SH "BUGS"
.IX Header "BUGS"
1. In capitalize_title, quoted sentence terminators are
treated as actual sentence breaks, e.g. in this case:
.PP
.Vb 1
\&     \*(Aqsay "yes but!" and "know what?"\*(Aq
.Ve
.PP
The program sees the ! and effectively treats this as two
separate sentences: the word \*(L"but\*(R" becomes \*(L"But\*(R" (under the
rule that last words must always be uppercase, even if they're
on the exception list) and the word \*(L"and\*(R" becomes \*(L"And\*(R" (under
the first word rule).
.PP
2. There's no good way to automatically handle names like
\&\*(L"McCoy\*(R".  Consider the difficulty of disambiguating \*(L"Macadam
Roads\*(R" from \*(L"MacAdam Rode\*(R".  If you need to solve problems like
this, consider using the case_surname function of Lingua::En::NameParse.
.PP
3. In general, Text::Capitalize is a very parochial
English oriented module that looks like it belongs in the
\&\*(L"Lingua::En::*\*(R" tree.
.PP
4. There's currently no way of doing a \s-1PRESERVE_ANYCAPS\s0
that *also* adjusts capitalization of words on the exception
list, so that \*(L"iMac Or iPod\*(R" would become \*(L"iMac or iPod\*(R".
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Text::Autoformat
.PP
\&\*(L"The Perl Cookbook\*(R", second edition, recipes 1.13 and 1.14
.PP
Lingua::En::NameParse
.PP
About \*(L"scramble_case\*(R":
<http://obsidianrook.com/devnotes/talks/esthetic_randomness/>
.SH "VERSION"
.IX Header "VERSION"
Version 0.9
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 3
\&   Joseph M. Brenner
\&      E\-Mail:   doom@kzsu.stanford.edu
\&      Homepage: http://obsidianrook.com/map
\&
\&   Stanislaw Y. Pusep  (who wrote "capitalize")
\&      E\-Mail:   stanis@linuxmail.org
\&      ICQ UIN:  11979567
\&      Homepage: http://sysdlabs.hypermart.net/
.Ve
.PP
And many thanks (for feature suggestions and code examples) to:
.PP
.Vb 1
\&    Belden Lyman, Yary Hcluhan, Randal Schwartz
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2003 by Joseph Brenner. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 28:" 4
.IX Item "Around line 28:"
Non-ASCII character seen before =encoding in '"u\*:ber'. Assuming \s-1UTF\-8\s0
